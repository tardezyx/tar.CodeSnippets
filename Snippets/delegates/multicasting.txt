using System;

// prepare methods
private static void ShowStrings1(string string1, string string2) {
  Console.WriteLine(string1 + " " + string2);
}

private static void ShowStrings2(string string1, string string2) {
  Console.WriteLine(string2 + " " + string1);
}

// define delegate type
private delegate void StringDelegate(string s1, string s2);

// define delegates
StringDelegate? delegateMulticasting;
StringDelegate delegate1 = new(ShowStrings1);
StringDelegate delegate2 = new(ShowStrings2);

// chain multiple methods which are called in sequence (used for complex event chains)      
delegateMulticasting  = delegate1;
delegateMulticasting += delegate2;

// same processing as the 'Simple' variant but via chained multicast
delegateMulticasting("Hello", "World");

// invocations can be directly subtracted
delegateMulticasting -= delegate1;

// number of invocations are listed within the delegate
if (delegateMulticasting is not null) {
  Delegate[] invocations = delegateMulticasting.GetInvocationList();
}

// Multicast delegates are used extensively in event handling:
// ------------------------------------------------------------------------------------------
// Event source objects send event notifications to recipient objects that have registered to receive that event.
// To register for an event, the recipient creates a method designed to handle the event,
// then creates a delegate for that method and passes the delegate to the event source.
// The source calls the delegate when the event occurs.
// The delegate then calls the event handling method on the recipient, delivering the event data.
// The delegate type for a given event is defined by the event source.