// bad code, do not use!
public sealed class SingletonV1 {
  private SingletonV1() { }
  private static SingletonV1? _instance;
  
  public static SingletonV1 Instance {
    get {
      _instance ??= new();
      return _instance;
    }
  }
}

/*
As hinted at before, the above is not thread-safe. Two different threads could
both have evaluated the test if (instance==null) and found it to be true, then
both create instances, which violates the singleton pattern. Note that in fact
the instance may already have been created before the expression is evaluated,
but the memory model doesn't guarantee that the new value of instance will be
seen by other threads unless suitable memory barriers have been passed. 
 */